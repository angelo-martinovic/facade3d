function [lab1Filename,lab2Filename] = Project2DOntoPointCloud()
    cf = DatasetConfig.getInstance();
    dl = DispatchingLogger.getInstance();
    dl.Log(VerbosityLevel.Info,sprintf('Projecting labeling onto the point cloud ...\n'));
    
    subset = 'eval';
    nClasses = cf.nClasses;
    
    % Read the 3D points
    [points,~,~] = ReadPCLFromPly(get_adr('pcl'));
    nPoints = size(points,1);
    
    % Read camera information from CMVS
    try
        cameras = ImportCameras(get_adr('cameras'));
    catch err
        dl.Log(VerbosityLevel.Error,...
            sprintf('ImportCameras failed with message "%s"\n',err.message));
        fatal();
    end

    % Subset of images used to project the labeling
    file_str_idx = LoadFilenames(subset);
    nImages = length(file_str_idx);
    
    % Mapping between cmvs images and labeled image
    histLabelsPerPoint_L1 = zeros(nPoints,nClasses);
    histLabelsPerPoint_L2 = zeros(nPoints,nClasses);
    
    probsPerPointAcc = zeros(nPoints,nClasses);
    probsPerPointCnt = zeros(nPoints,nClasses);

    % For each image
    tic;
    
    cnt = 0;
    pb = ProgressBar(nImages);
    for i=1:nImages
        basename = file_str_idx{i};
        bb=cellfun(@(x)strcmp(x.originalImageFilename(1:end-4),basename),...
            cameras,'UniformOutput',false);
        camIdx = find(cell2mat(bb));
        
        if isempty(camIdx)
            dl.Log(VerbosityLevel.Error,sprintf('Camera id not found...\n'));
            fatal();
        end
        
        height = cameras{camIdx}.principalPoint(2)*2;
        width = cameras{camIdx}.principalPoint(1)*2;
        
        % Generated by 2D labeling
        labelingFilename = get_adr('image_classifier_unaries',...
            cf.c2D.classifier.name,basename);

        if exist(labelingFilename,'file')
            cnt = cnt+1;

            load(labelingFilename);
            
            nDet = length(detectionData);
              
            detMap = detectionData;
            
            if ~exist('detName','var')
                detName = cell(1,nDet);
                probsPerPointDetAcc = cell(1,nDet);
                probsPerPointDetCnt = cell(1,nDet);
                
                for j=1:nDet
                    detName{j} = cf.c2D.detectors{j}.name;
                    probsPerPointDetAcc{j} = zeros(nPoints,nClasses);
                    probsPerPointDetCnt{j} = zeros(nPoints,nClasses);
                end
            end

            if height==size(layer1_labeling,2) && width==size(layer1_labeling,1)
                layer1_labeling = imrotate(layer1_labeling,90);
                layer2_labeling = imrotate(layer2_labeling,90);
                segPotentials = imrotate(segPotentials,90);
      
                for j=1:nDet
                    detMap{j} = imrotate(detMap{j},90);
                end

            else
                dl.Log(VerbosityLevel.Error,sprintf('Camera-labeling size mismatch!\n'));
                fatal();
            end
            
            % Backproject the labeling onto the point cloud
            newLabels_i = BackProjectLabeling(points,layer1_labeling,cameras{camIdx});
            [indices,~,labels] = find(newLabels_i);
            realIndices = sub2ind(size(histLabelsPerPoint_L1),indices,labels);
            histLabelsPerPoint_L1(realIndices) = histLabelsPerPoint_L1(realIndices)+1;
            
            newLabels_i = BackProjectLabeling(points,layer2_labeling,cameras{camIdx});
            [indices,~,labels] = find(newLabels_i);
            realIndices = sub2ind(size(histLabelsPerPoint_L2),indices,labels);
            histLabelsPerPoint_L2(realIndices) = histLabelsPerPoint_L2(realIndices)+1;
            
            % Backproject the probabilities
            for c=1:nClasses
                [~,idxs,vals] = BackProjectLabeling(points,segPotentials(:,:,c),cameras{camIdx});
                probsPerPointAcc(idxs,c) = probsPerPointAcc(idxs,c)+vals;
                probsPerPointCnt(idxs,c) = probsPerPointCnt(idxs,c)+1;
            end
            for j=1:nDet
                for c=1:nClasses
                    [~,idxs,vals] = BackProjectLabeling(points,detMap{j}(:,:,c),cameras{camIdx});
                    
                    probsPerPointDetAcc{j}(idxs,c) = probsPerPointDetAcc{j}(idxs,c)+vals;
                    probsPerPointDetCnt{j}(idxs,c) = probsPerPointDetCnt{j}(idxs,c)+1;
                end
            end
        end
        pb.progress();  
    end
    pb.stop();
    
    pb2 = probsPerPointAcc./probsPerPointCnt;
    pb2 = bsxfun(@rdivide,pb2,sum(pb2,2));
    pb2(isnan(pb2)) = 1/nClasses;
    unary = [points pb2]'; %#ok<NASGU>
    
    unaryDet = cell(1,nDet);
    for j=1:nDet
        
        pb2 = probsPerPointDetAcc{j}./probsPerPointDetCnt{j};
        pb2 = bsxfun(@rdivide,pb2,sum(pb2,2));
        pb2(isnan(pb2)) = 1/nClasses;
        un = [points pb2]';
    
    
        unaryDet{j}.unary = un;
        unaryDet{j}.name = detName{j};
    end
    
    dl.Log(VerbosityLevel.Info,...
        sprintf(' - Labeled the %s point cloud with %d labeled images.\n',subset,cnt));

    % Each camera projects only on a subset of the point cloud
    % For every point, find the most common label excluding label 0
    dl.Log(VerbosityLevel.Info,sprintf(' - Majority voting...\n'));
    [~,labeling_L1] = max(histLabelsPerPoint_L1,[],2);
    [~,labeling_L2] = max(histLabelsPerPoint_L2,[],2);
    
    labeling_L1 = labeling_L1 + 1;
    labeling_L2 = labeling_L2 + 1;
    
    labeling_L1(sum(histLabelsPerPoint_L1,2)==0) = 1;
    labeling_L2(sum(histLabelsPerPoint_L2,2)==0) = 1;

    projectionTime = toc;
    dl.Log(VerbosityLevel.Info,sprintf(' - Time elapsed: %d seconds.\n',projectionTime));
        
    % Mapping colors
    newColors_L1 = round(255*cf.cm(labeling_L1,:));
    newColors_L2 = round(255*cf.cm(labeling_L2,:));
    
    mkdirIfNotExist(get_adr('pclModelDir'));
    mkdirIfNotExist(get_adr('pclProbDir'));

    dl.Log(VerbosityLevel.Info,sprintf(' - Exporting point clouds...\n'));
    lab1Filename = get_adr('pcl_labeling','2D_layer1_majorityVote');
    lab2Filename = get_adr('pcl_labeling','2D_layer2_majorityVote');
    ExportMesh(lab1Filename ,points,[],newColors_L1,[],[]);
    ExportMesh(lab2Filename ,points,[],newColors_L2,[],[]);

    
    save(get_adr('pcl_unaries','2D'),'unary','unaryDet');
    dl.Log(VerbosityLevel.Info,sprintf(' - Done!\n'));
   
end